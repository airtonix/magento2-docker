# .gitlab-ci.yml
#
# This is used to test, build and release our infrastructure to both
# acceptance (running the develop branch) and production (running the
# release tagged with a version number).
#
# You MUST configure it by changing the variables settings below and we
# recommend going through the entire file to understand what happens and
# how it can affect your build and deployments.
#
# Apache License 2.0
# Copyright (c) 2018 Sensson and contributors
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
services:
  - docker:dind

# Set the CONTAINER variable to the same variable as what is set as image in
# name docker-compose.yml. CI will fail otherwise.
variables:
  DOCKER_DRIVER: overlay
  DOCKER_SWARM_MASTER: tcp://172.16.1.1:2376
  GIT_SUBMODULE_STRATEGY: recursive
  CONTAINER: $CI_REGISTRY_IMAGE:latest

# This tests the integration of our image into an environment running MySQL
# and Magento. As the initial deployment takes time we wait for a maximum of
# four minutes to deploy after which we consider the test to have failed.
#
# As soon as more tests are required it's recommended to switch from individual
# `docker run`-commands to a test suite written in bash.
.integration: &integration |
  docker-compose build
  docker-compose up -d
  echo "Waiting on the environment to come online"
  sleep 240
  docker logs magento-frontend || true
  docker run --rm --net host appropriate/curl -I -s localhost:8080 | \
    grep '200 OK'
  docker-compose down

# Deployment does not create new deployments for you. It will only update
# existing ones. Feel free to adjust as required.
.deployment: &deployment |
  docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  export DOCKER_TLS_VERIFY="1"
  export DOCKER_HOST="$DOCKER_SWARM_MASTER"
  export DOCKER_CERT_PATH="certs"
  mkdir $DOCKER_CERT_PATH
  echo "$DOCKER_MACHINE_CA" > $DOCKER_CERT_PATH/ca.pem
  echo "$DOCKER_MACHINE_CLIENT_CERT" > $DOCKER_CERT_PATH/cert.pem
  echo "$DOCKER_MACHINE_CLIENT_KEY" > $DOCKER_CERT_PATH/key.pem
  docker service update --with-registry-auth --image $RELEASE $SERVICE_FRONTEND
  docker service update --with-registry-auth --image $RELEASE $SERVICE_CRON
  rm -rf $DOCKER_CERT_PATH

# Setup all requirements for Magento 2 before we run `make source`.
before_script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  - apk update
  - apk add bash wget curl git make py-pip
  - apk add php7 php7-curl php7-openssl php7-json php7-phar php7-dom php7-iconv
  - apk add php7-mbstring php7-zlib php7-ctype php7-gd php7-simplexml
  - apk add php7-mcrypt php7-intl php7-xsl php7-zip php7-pdo_mysql php7-soap
  - apk add php7-xmlwriter php7-tokenizer php7-xml php7-bcmath
  - pip install docker-compose
  - curl -sS https://getcomposer.org/installer | php --
    --install-dir=/usr/bin --filename=composer
  - 'which ssh-agent || ( apk add openssh-client )'
  - eval $(ssh-agent -s)
  - bash -c 'ssh-add <(echo "$SSH_PRIVATE_KEY")'
  - mkdir -p ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n"
    > ~/.ssh/config'
  - composer config -a -g http-basic.repo.magento.com
    $COMPOSER_REPO_MAGENTO_COM_USERNAME $COMPOSER_REPO_MAGENTO_COM_PASSWORD
  - make source

stages:
  - build
  - deploy

# Run integration tests on every branch but don't push the image
build-branch:
  image: docker:latest
  stage: build
  except:
    - develop
    - tags
    - master
  script:
    - *integration

# Build an image for our development branch
build-develop:
  image: docker:latest
  stage: build
  only:
    - develop
  script:
    - *integration
    - docker push $CONTAINER

# Build an image for our releases
build-release:
  image: docker:latest
  stage: build
  variables:
    RELEASE: $CONTAINER
    SERVICE_CRON: core-prod-cron
    SERVICE_FRONTEND: core-prod-frontend
  only:
    - tags
  script:
    - *integration
    - docker tag $CONTAINER $CI_REGISTRY_IMAGE:latest
    - docker tag $CONTAINER $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG

# The deploy stage is split into a separate stage on purpose. If for any
# reason we need to redeploy a development or production environment this
# ensures that we only go through this particular step instead of building
# a new image. For this we override before_script as that would only slow
# down the deployment.
deploy-develop:
  image: docker:latest
  stage: deploy
  variables:
    RELEASE: $CI_REGISTRY_IMAGE:develop
    SERVICE_CRON: test-yourwebsite-cron
    SERVICE_FRONTEND: test-yourwebsite-com
  before_script:
    - echo 'Skipping integration and build process'
  environment:
    name: test
    url: https://test.yourwebsite.com/
  only:
    - develop
  script:
    - *deployment

deploy-release:
  image: docker:latest
  stage: deploy
  variables:
    RELEASE: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    SERVICE_CRON: prod-yourwebsite-cron
    SERVICE_FRONTEND: prod-yourwebsite-com
  before_script:
    - echo 'Skipping integration and build process'
  environment:
    name: production
    url: https://www.yourwebsite.com
  only:
    - tags
  script:
    - *deployment
